---
import ThemeSelect from '@astrojs/starlight/components/ThemeSelect.astro'
import type { Props } from '@astrojs/starlight/props.ts' 
---

<div style="display: none;" id="theme-select-wrapper">
  <ThemeSelect {...Astro.props} />
</div>

<button id="theme-toggle" aria-label="Toggle theme" class="theme-toggle">
  <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style is:global>
  [data-theme='light'] .moon-icon {
    display: none;
  }

  [data-theme='dark'] .sun-icon {
    display: none;
  }
</style>

<style>
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    background: transparent;
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    color: var(--text-color);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .theme-toggle:hover {
    background: var(--highlight-color);
  }

  .sun-icon, .moon-icon {
    height: 1.2rem;
    width: 1.2rem;
  }
</style>

<script>
  (() => {
    // Kludge... Create a wrapper for the original select dropdown and reuse it's logic.
    // This way - we don't have to duplicate it.
    
    const toggle = document.getElementById('theme-toggle');
    const select = document.getElementById('theme-select-wrapper')?.querySelector('select');

    if(!toggle || !select) {
      return false;
    }

    toggle.addEventListener('click', () => {
      const currentTheme = document.documentElement.getAttribute('data-theme');
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';

      select.value = newTheme;
      select.dispatchEvent(new Event('change'));
    });
  })();

</script> 